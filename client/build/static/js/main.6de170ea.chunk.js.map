{"version":3,"sources":["assets/spinner.gif","utils/helpers.js","utils/actions.js","components/ProductList/index.js","utils/queries.js","components/CategoryMenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Home.js","pages/Detail.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","pages/Login.js","pages/Signup.js","components/Nav/index.js","pages/Success.js","pages/OrderHistory.js","utils/reducers.js","utils/store.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","idbPromise","storeName","method","object","Promise","resolve","reject","db","tx","store","request","window","indexedDB","open","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close","ProductItem","item","image","name","price","quantity","dispatch","useDispatch","cart","useSelector","state","className","to","alt","src","count","pluralize","onClick","itemInCart","find","cartItem","type","purchaseQuantity","parseInt","product","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","CategoryMenu","categories","useQuery","loading","categoryData","data","useEffect","forEach","category","then","map","key","id","currentCategory","CartItem","placeholder","value","onChange","target","role","aria-label","removeFromCart","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","products","length","getCart","res","redirectToCheckout","sessionId","checkout","session","cartOpen","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","i","push","variables","Home","ProductList","Detail","useParams","useState","currentProduct","setCurrentProduct","indexedProducts","description","disabled","p","spinner","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","LOGIN","ADD_ORDER","ADD_USER","Login","props","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","Signup","addUser","firstName","lastName","Nav","href","logout","Success","addOrder","setTimeout","saveOrder","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","initialState","reducers","action","newState","filter","createStore","client","ApolloClient","operation","setContext","headers","authorization","uri","App","exact","path","component","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6de170ea.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/spinner.ab497855.gif\";","export function pluralize(name, count) {\n  if (count === 1) {\n    return name\n  }\n  return name + 's'\n}\n\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open('shop-shop', 1);\n\n    // create variables to hold reference to the database, transaction (tx), and object store\n    let db, tx, store;\n\n    // if version has changed (or if this is the first time using the database), run this method and create the three object stores \n    request.onupgradeneeded = function(e) {\n      const db = request.result;\n      // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n      db.createObjectStore('products', { keyPath: '_id' });\n      db.createObjectStore('categories', { keyPath: '_id' });\n      db.createObjectStore('cart', { keyPath: '_id' });\n    };\n\n    // handle any errors with connecting\n    request.onerror = function(e) {\n      console.log('There was an error');\n    };\n\n    // on database open success\nrequest.onsuccess = function(e) {\n  // save a reference of the database to the `db` variable\n  db = request.result;\n  // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n  tx = db.transaction(storeName, 'readwrite');\n  // save a reference to that object store\n  store = tx.objectStore(storeName);\n\n  // if there's any errors, let us know\n  db.onerror = function(e) {\n    console.log('error', e);\n  };\n\n  switch (method) {\n    case 'put':\n      store.put(object);\n      resolve(object);\n      break;\n    case 'get':\n      const all = store.getAll();\n      all.onsuccess = function() {\n        resolve(all.result);\n      };\n      break;\n    case 'delete':\n      store.delete(object._id);\n      break;\n    default:\n      console.log('No valid method');\n      break;\n  }\n\n  // when the transaction is complete, close the connection\n  tx.oncomplete = function() {\n    db.close();\n  };\n};\n\n  });\n}","export const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\nexport const ADD_TO_CART = 'ADD_TO_CART';\nexport const ADD_MULTIPLE_TO_CART = 'ADD_MULTIPLE_TO_CART';\nexport const REMOVE_FROM_CART = 'REMOVE_FROM_CART';\nexport const UPDATE_CART_QUANTITY = 'UPDATE_CART_QUANTITY';\nexport const CLEAR_CART = 'CLEAR_CART';\nexport const TOGGLE_CART = 'TOGGLE_CART';","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { pluralize } from \"../../utils/helpers\";\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction ProductItem(item) {\n  const {\n    image,\n    name,\n    _id,\n    price,\n    quantity\n  } = item;\n  \n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\n  const { cart } = state;\n\nconst addToCart = () => {\n  const itemInCart = cart.find((cartItem) => cartItem._id === _id)\n  if (itemInCart) {\n    dispatch({\n      type: UPDATE_CART_QUANTITY,\n      _id: _id,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n    });\n    idbPromise('cart', 'put', {\n      ...itemInCart,\n      purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n    });\n  } else {\n    dispatch({\n      type: ADD_TO_CART,\n      product: { ...item, purchaseQuantity: 1 }\n    });\n    idbPromise('cart', 'put', { ...item, purchaseQuantity: 1 });\n  }\n};\n  \n\n  return (\n    <div className=\"card px-1 py-1\">\n      <Link to={`/products/${_id}`}>\n        <img\n          alt={name}\n          src={`/images/${image}`}\n        />\n        <p>{name}</p>\n      </Link>\n      <div>\n        <div>{quantity} {pluralize(\"item\", quantity)} in stock</div>\n        <span>${price}</span>\n      </div>\n      <button onClick={ addToCart }>Add to cart</button>\n    </div>\n  );\n}\n\nexport default ProductItem;","  \nimport gql from 'graphql-tag';\n\nexport const QUERY_PRODUCTS = gql`\n  query getProducts($category: ID) {\n    products(category: $category) {\n      _id\n      name\n      description\n      price\n      quantity\n      image\n      category {\n        _id\n      }\n    }\n  }\n`;\n\nexport const QUERY_ALL_PRODUCTS = gql`\n  {\n    products {\n      _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      }\n    }\n  }\n`;\n\nexport const QUERY_CATEGORIES = gql`\n{\n  categories {\n    _id\n    name\n  }\n}\n`;\n\nexport const QUERY_USER = gql`\n{\n  user {\n    firstName\n    lastName\n    orders {\n      _id\n      purchaseDate\n      products {\n        _id\n        name\n        description\n        price\n        quantity\n        image\n      }\n    }\n  }\n}\n`;\n\nexport const QUERY_CHECKOUT = gql`\n  query getCheckout($products: [ID]!) {\n    checkout(products: $products) {\n      session\n    }\n  }\n`;","import React, { useEffect } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\n// import { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\nimport { idbPromise } from '../../utils/helpers';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction CategoryMenu() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n\n  const { categories } = state;\n\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;","import React from 'react';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from '../../utils/actions';\nimport { idbPromise } from \"../../utils/helpers\";\nimport { useDispatch } from 'react-redux';\n\n\nconst CartItem = ({ item }) => {\n    const dispatch = useDispatch();\n\n    const removeFromCart = item => {\n        dispatch({\n          type: REMOVE_FROM_CART,\n          _id: item._id\n        });\n        idbPromise('cart', 'delete', { ...item });\n      };\n\n    const onChange = (e) => {\n        const value = e.target.value;\n\n        if (value === '0') {\n            dispatch({\n              type: REMOVE_FROM_CART,\n              _id: item._id\n            });\n          \n            idbPromise('cart', 'delete', { ...item });\n          } else {\n            dispatch({\n              type: UPDATE_CART_QUANTITY,\n              _id: item._id,\n              purchaseQuantity: parseInt(value)\n            });\n          \n            idbPromise('cart', 'put', { ...item, purchaseQuantity: parseInt(value) });\n          }\n    };\n\n    return (\n        <div className=\"flex-row\">\n            <div>\n                <img\n                    src={`/images/${item.image}`}\n                    alt=\"\"\n                />\n            </div>\n            <div>\n                <div>{item.name}, ${item.price}</div>\n                <div>\n                    <span>Qty:</span>\n                    <input\n                        type=\"number\"\n                        placeholder=\"1\"\n                        value={item.purchaseQuantity}\n                        onChange={onChange}\n                    />\n                    <span\n                        role=\"img\"\n                        aria-label=\"trash\"\n                        onClick={() => removeFromCart(item)}\n                    >\n                        🗑️\n                    </span>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default CartItem;","  \nimport decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();","  \nimport React, { useEffect } from \"react\";\nimport CartItem from '../CartItem';\nimport Auth from '../../utils/auth';\nimport './style.css';\n// import { useStoreContext } from '../../utils/GlobalState';\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from \"../../utils/actions\";\nimport { idbPromise } from \"../../utils/helpers\";\nimport { QUERY_CHECKOUT } from '../../utils/queries';\nimport { loadStripe } from '@stripe/stripe-js';\nimport { useLazyQuery } from '@apollo/react-hooks';\nimport { useDispatch, useSelector } from 'react-redux';\n\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\n\nconst Cart = () => {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\n\n  useEffect(() => {\n    async function getCart() {\n      const cart = await idbPromise('cart', 'get');\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\n    };\n\n    if (!state.cart.length) {\n      getCart();\n    }\n  }, [state.cart.length, dispatch]);\n\n  useEffect(() => {\n    if (data) {\n      stripePromise.then((res) => {\n        res.redirectToCheckout({ sessionId: data.checkout.session });\n      });\n    }\n  }, [data]);\n\n  function toggleCart() {\n    dispatch({ type: TOGGLE_CART });\n  }\n\n  function calculateTotal() {\n    let sum = 0;\n    state.cart.forEach(item => {\n      sum += item.price * item.purchaseQuantity;\n    });\n    return sum.toFixed(2);\n  }\n\n  if (!state.cartOpen) {\n    return (\n      <div className=\"cart-closed\" onClick={toggleCart}>\n        <span\n          role=\"img\"\n          aria-label=\"trash\">🛒</span>\n      </div>\n    );\n  }\n\n  function submitCheckout() {\n    const productIds = [];\n\n    state.cart.forEach((item) => {\n      for (let i = 0; i < item.purchaseQuantity; i++) {\n        productIds.push(item._id);\n      }\n    });\n    getCheckout({\n      variables: { products: productIds }\n    });\n  }\n\n  return (\n    <div className=\"cart\">\n      <div className=\"close\" onClick={toggleCart}>[close]</div>\n      <h2>Shopping Cart</h2>\n      {state.cart.length ? (\n        <div>\n          {state.cart.map(item => (\n            <CartItem key={item._id} item={item} />\n          ))}\n          <div className=\"flex-row space-between\">\n            <strong>Total: ${calculateTotal()}</strong>\n            {\n              Auth.loggedIn() ?\n                <button onClick={submitCheckout}>\n                  Checkout\n        </button>\n                :\n                <span>(log in to check out)</span>\n            }\n          </div>\n        </div>\n      ) : (\n          <h3>\n            <span role=\"img\" aria-label=\"shocked\">\n              😱\n      </span>\n      You haven't added anything to your cart yet!\n          </h3>\n        )}\n    </div>\n\n  );\n};\n\nexport default Cart;","import React, { useState } from \"react\";\nimport ProductList from \"../components/ProductList\";\nimport CategoryMenu from \"../components/CategoryMenu\";\nimport Cart from '../components/Cart';\n\nconst Home = () => {\n  return (\n    <div className=\"container\">\n      <CategoryMenu />\n      <ProductList />\n      <Cart />\n    </div>\n  );\n};\n\nexport default Home;","import React, { useEffect, useState } from \"react\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useQuery } from '@apollo/react-hooks';\n\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\nimport spinner from '../assets/spinner.gif'\n\n// import { useStoreContext } from \"../utils/GlobalState\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  ADD_TO_CART,\n  UPDATE_PRODUCTS,\n} from '../utils/actions';\nimport Cart from '../components/Cart';\n\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Detail() {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const { id } = useParams();\n\n  const [currentProduct, setCurrentProduct] = useState({})\n\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\n\n  const { products, cart } = state;\n\n  const addToCart = () => {\n    const itemInCart = cart.find((cartItem) => cartItem._id === id)\n  \n    if (itemInCart) {\n      dispatch({\n        type: UPDATE_CART_QUANTITY,\n        _id: id,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n      // if we're updating quantity, use existing item data and increment purchaseQuantity value by one\n      idbPromise('cart', 'put', {\n        ...itemInCart,\n        purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1\n      });\n    } else {\n      dispatch({\n        type: ADD_TO_CART,\n        product: { ...currentProduct, purchaseQuantity: 1 }\n      });\n      // if product isn't in the cart yet, add it to the current shopping cart in IndexedDB\n      idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\n    }\n  }\n  \n\n  const removeFromCart = () => {\n    dispatch({\n      type: REMOVE_FROM_CART,\n      _id: currentProduct._id\n    });\n  \n    // upon removal from cart, delete the item from IndexedDB using the `currentProduct._id` to locate what to remove\n    idbPromise('cart', 'delete', { ...currentProduct });\n  };\n\n  useEffect(() => {\n    // already in global store\n    if (products.length) {\n      setCurrentProduct(products.find(product => product._id === id));\n    } \n    // retrieved from server\n    else if (data) {\n      dispatch({\n        type: UPDATE_PRODUCTS,\n        products: data.products\n      });\n  \n      data.products.forEach((product) => {\n        idbPromise('products', 'put', product);\n      });\n    }\n    // get cache from idb\n    else if (!loading) {\n      idbPromise('products', 'get').then((indexedProducts) => {\n        dispatch({\n          type: UPDATE_PRODUCTS,\n          products: indexedProducts\n        });\n      });\n    }\n  }, [products, data, loading, dispatch, id]);\n\n  return (\n    <>\n      {currentProduct ? (\n        <div className=\"container my-1\">\n          <Link to=\"/\">\n            ← Back to Products\n          </Link>\n\n          <h2>{currentProduct.name}</h2>\n\n          <p>\n            {currentProduct.description}\n          </p>\n\n          <p>\n            <strong>Price:</strong>\n            ${currentProduct.price}\n            {\" \"}\n            <button onClick={addToCart}>Add to cart</button>\n            <button\n              disabled={!cart.find(p => p._id === currentProduct._id)}\n              onClick={removeFromCart}\n            >\n              Remove from Cart\n</button>\n          </p>\n\n          <img\n            src={`/images/${currentProduct.image}`}\n            alt={currentProduct.name}\n          />\n        </div>\n      ) : null}\n      {\n        loading ? <img src={spinner} alt=\"loading\" /> : null\n      }\n      <Cart />\n    </>\n  );\n};\n\nexport default Detail;","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","  \nimport gql from 'graphql-tag';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\n\nexport const ADD_ORDER = gql`\n  mutation addOrder($products: [ID]!) {\n    addOrder(products: $products) {\n      purchaseDate\n      products {\n        _id\n      name\n      description\n      price\n      quantity\n      category {\n        name\n      } \n      }\n    }\n  }\n`;\n\n\nexport const ADD_USER = gql`\n  mutation addUser($firstName: String!, $lastName: String!, $email: String!, $password: String!) {\n    addUser(firstName: $firstName, lastName: $lastName, email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;","import React, { useState } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport { Link } from \"react-router-dom\";\nimport { LOGIN } from \"../utils/mutations\"\nimport Auth from \"../utils/auth\";\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' })\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({ variables: { email: formState.email, password: formState.password } })\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e)\n    }\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">\n        ← Go to Signup\n      </Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {\n          error ? <div>\n            <p className=\"error-text\" >The provided credentials are incorrect</p>\n          </div> : null\n        }\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\n\nexport default Login;","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Auth from \"../utils/auth\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nfunction Signup(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async event => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email, password: formState.password,\n        firstName: formState.firstName, lastName: formState.lastName\n      }\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">\n        ← Go to Login\n      </Link>\n\n      <h2>Signup</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">First Name:</label>\n          <input\n            placeholder=\"First\"\n            name=\"firstName\"\n            type=\"firstName\"\n            id=\"firstName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"lastName\">Last Name:</label>\n          <input\n            placeholder=\"Last\"\n            name=\"lastName\"\n            type=\"lastName\"\n            id=\"lastName\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">\n            Submit\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n\n}\n\nexport default Signup;","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/orderHistory\">\n              Order History\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/signup\">\n              Signup\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          <span role=\"img\" aria-label=\"shopping bag\">🛍️</span>\n          -Shop-Shop\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;","import React, { useEffect } from \"react\";\nimport { useMutation } from '@apollo/react-hooks';\nimport Jumbotron from \"../components/Jumbotron\";\nimport { ADD_ORDER } from \"../utils/mutations\";\nimport { idbPromise } from \"../utils/helpers\";\n\nfunction Success() {\n    const [addOrder] = useMutation(ADD_ORDER);\n\nuseEffect(() => {\n  async function saveOrder() {\n    const cart = await idbPromise('cart', 'get');\n    const products = cart.map(item => item._id);\n\n    if (products.length) {\n        const { data } = await addOrder({ variables: { products } });\n        const productData = data.addOrder.products;\n      \n        productData.forEach((item) => {\n          idbPromise('cart', 'delete', item);\n        });\n      }\n      setTimeout(() => {\n        window.location.assign(\"/\");\n    }, 3000);\n  }\n\n  saveOrder();\n}, [addOrder]);\n\n    return (\n      <div>\n        <Jumbotron>\n          <h1>Success!</h1>\n          <h2>\n            Thank you for your purchase!\n          </h2>\n          <h2>\n            You will now be redirected to the homepage\n          </h2>\n        </Jumbotron>\n      </div>\n    );\n  };\n\n  export default Success;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { QUERY_USER } from \"../utils/queries\";\n\nfunction OrderHistory() {\n  const { data } = useQuery(QUERY_USER);\n  let user;\n\n  if (data) {\n    user = data.user;\n  }\n\n  return (\n    <>\n      <div className=\"container my-1\">\n        <Link to=\"/\">\n          ← Back to Products\n          </Link>\n\n        {user ? (\n          <>\n            <h2>Order History for {user.firstName} {user.lastName}</h2>\n            {user.orders.map((order) => (\n              <div key={order._id} className=\"my-2\">\n                <h3>{new Date(parseInt(order.purchaseDate)).toLocaleDateString()}</h3>\n                <div className=\"flex-row\">\n                  {order.products.map(({ _id, image, name, price }, index) => (\n                    <div key={index} className=\"card px-1 py-1\">\n                      <Link to={`/products/${_id}`}>\n                        <img\n                          alt={name}\n                          src={`/images/${image}`}\n                        />\n                        <p>{name}</p>\n                      </Link>\n                      <div>\n                        <span>${price}</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </>\n        ) : null}\n\n      </div>\n\n    </>)\n\n};\n\nexport default OrderHistory;","import {\n  UPDATE_PRODUCTS,\n  UPDATE_CATEGORIES,\n  UPDATE_CURRENT_CATEGORY,\n  ADD_TO_CART,\n  ADD_MULTIPLE_TO_CART,\n  REMOVE_FROM_CART,\n  UPDATE_CART_QUANTITY,\n  CLEAR_CART,\n  TOGGLE_CART,\n} from \"./actions\";\n\n// import { useReducer } from 'react';\n\nconst initialState = {\n  products: [],\n  categories: [],\n  currentCategory: \"\",\n  cart: [],\n  cartOpen: false,\n};\n\nexport const reducers = (state = initialState, action) => {\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return {\n        ...state,\n        products: [...action.products],\n      };\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n    case UPDATE_CATEGORIES:\n      return {\n        ...state,\n        categories: [...action.categories],\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return {\n        ...state,\n        currentCategory: action.currentCategory,\n      };\n\n    case ADD_TO_CART:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product],\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return {\n        ...state,\n        cart: [...state.cart, ...action.products],\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter((product) => {\n        return product._id !== action._id;\n      });\n\n      return {\n        ...state,\n        cartOpen: newState.length > 0,\n        cart: newState,\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return {\n        ...state,\n        cartOpen: true,\n        cart: state.cart.map((product) => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n          return product;\n        }),\n      };\n\n    case CLEAR_CART:\n      return {\n        ...state,\n        cartOpen: false,\n        cart: [],\n      };\n\n    case TOGGLE_CART:\n      return {\n        ...state,\n        cartOpen: !state.cartOpen,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducers;\n","import { createStore } from 'redux';\nimport reducers from './reducers'\n\nexport default createStore(reducers);","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport ApolloClient from 'apollo-boost';\nimport Home from \"./pages/Home\";\nimport Detail from \"./pages/Detail\";\nimport NoMatch from \"./pages/NoMatch\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Nav from \"./components/Nav\";\nimport Success from \"./pages/Success\"\n// import { StoreProvider } from \"./utils/GlobalState\";\nimport OrderHistory from \"./pages/OrderHistory\";\nimport { Provider } from 'react-redux';\nimport store from \"./utils/store\";\n\nconst client = new ApolloClient({\n  request: (operation) => {\n    const token = localStorage.getItem('id_token')\n    operation.setContext({\n      headers: {\n        authorization: token ? `Bearer ${token}` : ''\n      }\n    })\n  },\n  uri: '/graphql',\n})\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <Provider store={store}>\n            <Nav />\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route exact path=\"/login\" component={Login} />\n              <Route exact path=\"/signup\" component={Signup} />\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\n              <Route exact path=\"/products/:id\" component={Detail} />\n              <Route exact path=\"/success\" component={Success} />\n              <Route component={NoMatch} />\n            </Switch>\n          </Provider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}